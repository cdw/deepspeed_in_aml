# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

FROM nvidia/cuda:11.0-cudnn8-devel-ubuntu18.04

USER root:root

##############################################################################
# Environment variables
##############################################################################

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV DEBIAN_FRONTEND noninteractive
ENV LD_LIBRARY_PATH "/usr/local/cuda/extras/CUPTI/lib64:${LD_LIBRARY_PATH}"

ENV STAGE_DIR=/root/gpu/install \
    CUDA_HOME=/usr/local/cuda \
    CUDNN_HOME=/usr/lib/x86_64-linux-gnu \
    CUDACXX=/usr/local/cuda/bin/nvcc

RUN mkdir -p $STAGE_DIR

RUN apt-get -y update && \
    apt-get --assume-yes --no-install-recommends install \
    autotools-dev \
    bash \
    bc \
    build-essential \
    cabextract \
    cpio \
    curl \
    dapl2-utils \
    dos2unix \
    g++ \
    gcc \
    git \
    htop iftop iotop rsync iputils-ping \
    ibutils \
    ibverbs-utils \
    infiniband-diags \
    iproute2 \
    less \
    libdapl2 \
    libfuse-dev \
    libmlx4-1 \
    libmlx5-1 \
    libmthca1 \
    libnuma-dev \
    librdmacm-dev \
    librdmacm1 \
    net-tools \
    nfs-common \
    openssh-client \
    openssh-server \
    pbzip2 \
    pciutils \
    pdsh \
    perftest \
    pssh \
    pv bzip2 \
    rdmacm-utils \
    sudo \
    tar \
    tmux \
    unzip \
    wget && \
    rm -rf /var/lib/apt/lists/*


##############################################################################
# Conda Environment
##############################################################################
# MiniConda with python 3.7.7
ARG MINICONDA_VERSION=4.7.12.1  
ARG PYTHON_INSTALL_VERSION=3.7.7

ENV MINICONDA_VERSION ${MINICONDA_VERSION}
ENV PATH /opt/miniconda/bin:$PATH
RUN wget -qO /tmp/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh    && \
    bash /tmp/miniconda.sh -bf -p /opt/miniconda && \
    conda clean -ay && \
    rm -rf /opt/miniconda/pkgs && \
    rm /tmp/miniconda.sh && \
    find / -type d -name __pycache__ | xargs rm -rf

##############################################################################
# Generic ENV
##############################################################################
ENV LD_LIBRARY_PATH "$LD_LIBRARY_PATH:/usr/local/lib:/usr/lib/x86_64-linux-gnu"
ENV STAGE_DIR "/root/gpu/install"
RUN mkdir -p $STAGE_DIR

##############################################################################
# nv_peer_mem
##############################################################################
RUN apt-get -y update && apt-get install -y --no-install-recommends debhelper dkms && rm -rf /var/lib/apt/lists/*
RUN mkdir -p ${STAGE_DIR} && \
    git clone https://github.com/Mellanox/nv_peer_memory.git ${STAGE_DIR}/nv_peer_memory && \    
    cd ${STAGE_DIR}/nv_peer_memory && \
    git checkout 4ed7715d62edf1cbcbb522a9f9a0efb13e43b0d0 && \  
    ./build_module.sh && \
    cd /tmp && \
    tar xzf /tmp/nvidia-peer-memory_1.1.orig.tar.gz && \
    cd nvidia-peer-memory-1.1 && \
    dpkg-buildpackage -us -uc && \
    dpkg -i ../nvidia-peer-memory_1.1-0_all.deb
WORKDIR $STAGE_DIR

##############################################################################
# OPENMPI
##############################################################################
ENV OPENMPI_BASEVERSION=4.0
ENV OPENMPI_VERSION_STRING=${OPENMPI_BASEVERSION}.5
RUN cd ${STAGE_DIR} && \
    wget -q -O - https://download.open-mpi.org/release/open-mpi/v${OPENMPI_BASEVERSION}/openmpi-${OPENMPI_VERSION_STRING}.tar.gz | tar xzf - && \
    cd openmpi-${OPENMPI_VERSION_STRING} && \
    ./configure  --enable-orterun-prefix-by-default && \
    make uninstall && \
    make -j"$(nproc)" install && \
    # Sanity check:
    test -f /usr/local/bin/mpic++ && \
    ldconfig && \
    cd ${STAGE_DIR} && \
    rm -r ${STAGE_DIR}/openmpi-${OPENMPI_VERSION_STRING}
ENV PATH=/usr/local/bin:${PATH} \
    LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH}


ENV CMAKE_VERSION=3.16.4
RUN cd /usr/local && \
    wget -q -O - https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz | tar zxf -
ENV PATH=/usr/local/cmake-${CMAKE_VERSION}-Linux-x86_64/bin:${PATH}

WORKDIR /workspace

##############################################################################
# Packages from Nvidia
##############################################################################
RUN apt-get -y update && apt-get -y install --no-install-recommends \
    software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa -y && \
    echo "deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && \
    apt-get update && apt-get install -y --allow-change-held-packages --allow-downgrades --no-install-recommends \
    ca-certificates \
    libjpeg-dev \
    libpng-dev \
    libsndfile-dev \
    libcupti-dev \
    libjpeg-dev \
    libpng-dev \
    screen \
    libxml2-dev \
    libxslt-dev &&\  
    rm -rf /var/lib/apt/lists/*


##############################################################################
# Setup conda environment, cuda
##############################################################################
RUN conda install -y python=$PYTHON_INSTALL_VERSION pyyaml scipy ipython cython typing mkl mkl-include setuptools
RUN echo /usr/lib/x86_64-linux-gnu >> /etc/ld.so.conf.d/cuda-11-0.conf
RUN ldconfig
    
##############################################################################
# PyTorch, tensorboard, transformers, and supports
##############################################################################
## Pinning PIP b/c https://azure.github.io/azureml-sdk-for-r/articles/troubleshooting.html#training
RUN python -m pip install --upgrade pip==20.1.1
RUN pip install --no-cache-dir --find-links https://download.pytorch.org/whl/torch_stable.html \ 
    torch==1.7.0+cu110 \
    torchaudio==0.7.0 \
    torchtext==0.8.0 \
    torchvision==0.8.1+cu110

RUN pip install --no-cache-dir  \
    Cerberus==1.3.4 \
    git+https://github.com/NVIDIA/dllogger@a20b622027e4e7828be861fcaf11a4299b3d1754 \
    GPUtil==1.4.0 \
    PyYAML==5.3.1 \
    Sphinx==4.1.1 \
    astor==0.8.1 \
    azureml-core==1.17.0.post1 \
    azureml-dataprep==2.4.2 \
    azureml-defaults==1.17.0 \
    azureml-mlflow==1.32.0.post1 \
    azureml-telemetry==1.17.0 \
    azureml-train==1.17.0 \
    boto3==1.18.3 \
    cffi==1.13.0 \
    datasets==1.9.0 \
    graphviz==0.17 \
    h5py==2.10.0 \
    html2text==2020.1.16 \
    ipdb==0.13.9 \
    matplotlib==3.4.2 \
    mpi4py==3.0.3 \
    msgpack==1.0.2 \
    nltk==3.6.2 \
    numpy==1.18.5 \
    nvidia-ml-py3==7.352.0 \
    onnxruntime==1.8.1 \
    pandas==1.3.0 \
    progressbar==2.5 \
    psutil==5.8.0 \
    py3nvml==0.2.6 \
    pyarrow==4.0.1 \
    pytorch-lightning==1.3.8 \
    requests==2.22.0 \
    scikit-learn==0.24.2 \
    scipy==1.4.1 \
    sentencepiece==0.1.96 \
    sphinx-rtd-theme==0.5.2 \
    sympy==1.8 \
    tensorboard==2.3.0 \
    tensorboardX==1.8 \
    tensorflow==2.3.0 \
    tqdm==4.43.0 \
    transformers==4.8.2 \
    wget==3.2 \
    yappi==1.3.2

############################################
# Install Apex
# https://github.com/NVIDIA/apex/issues/988
############################################
RUN pip install -v --no-cache-dir --global-option="--cpp_ext" --global-option="--cuda_ext" \
    git+git://github.com/NVIDIA/apex.git@0c2c6eea6556b208d1a8711197efc94899e754e1

############################################
# Install DeepSpeed from source
############################################
RUN pip install -v git+git://github.com/microsoft/DeepSpeed.git@6ba96289702afc56948aa9f6cff55d7df678ccc0
RUN ds_report